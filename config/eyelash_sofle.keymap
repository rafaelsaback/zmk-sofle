#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

// allow multiple taps when tap-hold  https://github.com/zmkfirmware/zmk/issues/288
&mt { quick_tap_ms =<200>; };
&lt { quick_tap_ms =<200>; };

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    hml: hml {
        compatible = "zmk,behavior-hold-tap";
        label = "home_row_mod_left";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        quick-tap-ms = <175>;
        flavor = "balanced";
        hold-trigger-on-release;
        hold-trigger-key-positions = <59 60 46 33 20 7 9 11 12 21 22 23 24 25 34 35 36 37 38 47 48 49 50 51 61 62 63 8 9 10 11 21 22 23 24 34 35 36 37 47 48 49 0 1 2 3 4 5 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44 53 54 55 56 57>;
        require-prior-idle-ms = <150>;
    };

    hmr: hmr {
        compatible = "zmk,behavior-hold-tap";
        label = "home_row_mod_right";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        quick-tap-ms = <175>;
        flavor = "balanced";
        hold-trigger-on-release;
        hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44 53 54 55 56 57 52 7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 60 61 62 63 59>;
        require-prior-idle-ms = <150>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp GRAVE   &kp N1             &kp N2               &kp N3           &kp N4           &kp N5             &none  &kp N6        &kp N7            &kp N8            &kp N9                &kp N0                      &kp MINUS
&kp TAB     &kp Q              &kp W                &kp E            &kp R            &kp T              &none  &kp Y         &kp U             &kp I             &kp O                 &kp P                       &kp EQUAL
&kp ESCAPE  &hml LEFT_SHIFT A  &hml LEFT_CONTROL S  &hml LEFT_ALT D  &hml LEFT_GUI F  &kp G              &none  &kp H         &hmr RIGHT_GUI J  &hmr RIGHT_ALT K  &hmr RIGHT_CONTROL L  &hmr RIGHT_SHIFT SEMICOLON  &kp APOS
&kp LSHFT   &kp Z              &kp X                &kp C            &kp V            &kp B              &none  &kp N         &kp M             &kp COMMA         &kp DOT               &kp FSLH                    &kp BACKSLASH
&none       &kp LEFT_GUI       &kp LEFT_ARROW       &kp RIGHT_ARROW  &lt 1 SPACE      &lt 2 BACKSPACE    &none  &lt 2 DELETE  &lt 1 ENTER       &kp DOWN_ARROW    &kp UP_ARROW          &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&trans  &kp F1         &kp F2          &kp F3                    &kp F4                 &kp F5       &none  &kp F6         &kp F7        &kp F8        &kp F9        &kp F10       &kp F11
&trans  &trans         &trans          &kp LEFT_BRACE            &kp RIGHT_BRACE        &trans       &none  &trans         &kp N7        &kp N8        &kp N9        &kp ASTERISK  &kp F12
&trans  &trans         &trans          &kp LEFT_PARENTHESIS      &kp RIGHT_PARENTHESIS  &kp GRAVE    &none  &kp MINUS      &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS      &trans
&trans  &trans         &trans          &kp LEFT_BRACKET          &kp RIGHT_BRACKET      &kp TILDE    &none  &kp AMPERSAND  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH     &trans
&none   &kp LC(LG(Q))  &kp LG(LS(N5))  &kp LG(LS(LC(NUMBER_4)))  &trans                 &trans       &none  &trans         &trans        &kp N0        &kp PERIOD    &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&kp TILDE  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp F6  &kp F7  &kp F8      &kp F9     &kp F10      &trans
&trans     &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &trans  &trans  &kp F11     &kp F12    &kp UNDER    &kp PLUS
&trans     &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans  &trans  &trans      &trans     &kp LBRC     &kp RBRC
&trans     &sys_reset    &trans          &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans  &trans  &sys_reset  &soft_off  &bootloader  &trans
&trans     &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans  &trans  &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
